pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        EKS_CLUSTER = 'springboot-cluster'
        AWS_ACCOUNT_ID = '975373241855'
        DOCKER_IMAGE = 'addressbook-app'
        VERSION = 'latest'
        S3_BUCKET = 'my-springbootapp-bucket'
        ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${DOCKER_IMAGE}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/vivekbhaskar746/addressbook-deploymnet.git', branch: 'main'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'chmod +x mvnw || true'
                sh './mvnw clean package -Dmaven.test.skip=true || mvn clean package -Dmaven.test.skip=true'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE}:${VERSION} ."
            }
        }

        stage('Push to ECR') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                    sh '''
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

                    # Ensure ECR repo exists
                    aws ecr describe-repositories --repository-names $DOCKER_IMAGE || \
                    aws ecr create-repository --repository-name $DOCKER_IMAGE

                    docker tag $DOCKER_IMAGE:$VERSION $ECR_REPO:$VERSION
                    docker push $ECR_REPO:$VERSION
                    '''
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                    sh '''
                    aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER

                    kubectl apply -f k8s/deployment.yml
                    kubectl apply -f k8s/service.yml
                    kubectl apply -f my-sqldeployment.yml
                    '''
                }
            }
        }

        stage('Smoke Test') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                    script {
                        sh '''
                        aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER
                        echo "Running smoke test..."

                        for i in $(seq 1 10); do
                          HOST=$(kubectl get svc addressbook-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}" 2>/dev/null)
                          if [ -n "$HOST" ]; then
                            echo "LoadBalancer hostname: $HOST"
                            break
                          fi
                          echo "Waiting for LoadBalancer IP... ($i)"
                          sleep 30
                        done

                        if [ -z "$HOST" ]; then
                          echo "LoadBalancer hostname not available. Smoke test failed."
                          exit 1
                        fi

                        curl -sSf http://$HOST:80/actuator/health | grep '"status":"UP"' || {
                          echo "Smoke test failed: Health endpoint did not return UP"
                          exit 1
                        }
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                sh '''
                aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER

                echo "Pipeline completed at $(date)" > pipeline.log
                echo "Pods status:" >> pipeline.log
                kubectl get pods >> pipeline.log
                echo "Service status:" >> pipeline.log
                kubectl get svc addressbook-service >> pipeline.log

                aws s3 cp pipeline.log s3://$S3_BUCKET/logs/pipeline-$(date +%Y%m%d%H%M%S).log
                '''
            }
        }
    }
}
