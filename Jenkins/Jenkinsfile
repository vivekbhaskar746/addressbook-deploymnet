pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        EKS_CLUSTER = 'springboot-cluster'
        AWS_ACCOUNT_ID = '211125504486'
        DOCKER_IMAGE = 'addressbook-app'
        VERSION = 'latest'
        S3_BUCKET = 'my-springbootapp-bucket'
        AWS_ACCESS_KEY_ID = 'AKIATCKAPRHTHCHPSVMH'
        AWS_SECRET_ACCESS_KEY = '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'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/vivekbhaskar746/addressbook-deploymnet.git', branch: 'main'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'chmod +x mvnw || true'
                sh './mvnw clean package -Dmaven.test.skip=true || mvn clean package -Dmaven.test.skip=true'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t $DOCKER_IMAGE:$VERSION ."
            }
        }

        stage('Push to ECR') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                    sh '''
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 211125504486.dkr.ecr.us-east-1.amazonaws.com
                    docker build -t my-addressbook .
                    docker tag my-addressbook:latest 211125504486.dkr.ecr.us-east-1.amazonaws.com/my-addressbook:latest
                    docker push 211125504486.dkr.ecr.us-east-1.amazonaws.com/my-addressbook:latest
                    '''
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                    sh '''
                    aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER

                    kubectl apply -f k8s/mysql-deployment.yml
                    kubectl apply -f k8s/mysql-service.yml
                    kubectl apply -f k8s/deployment.yml
                    kubectl apply -f k8s/service.yml
                    '''
                }
            }
        }

        stage('Smoke Test') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                    script {
                        sh '''
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set region $AWS_REGION
                        aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER
                        echo "Running smoke test..."
                        HOST=$(kubectl get svc myapp-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
                        curl -f http://$HOST:80/actuator/health
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                sh '''
                echo "Pipeline completed at $(date)" > pipeline.log
                echo "Pods status:" >> pipeline.log
                kubectl get pods >> pipeline.log
                echo "Service status:" >> pipeline.log
                kubectl get svc myapp-service >> pipeline.log

                aws s3 cp pipeline.log s3://$S3_BUCKET/logs/pipeline-$(date +%Y%m%d%H%M%S).log
                '''
            }
        }
    }

}
